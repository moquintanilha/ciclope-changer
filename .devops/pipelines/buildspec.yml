---
version: 0.2
phases:
  install:
    on-failure: ABORT
    runtime-versions:
      python: 3.10
    commands:
      - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      - unzip awscliv2.zip > /dev/null
      - ./aws/install --update
      - export VERSION=$(cat version.json | jq .version | sed 's/"//g')
      - echo "VERSION -> ${VERSION}"
      - echo "APPLICATION_NAME -> $APPLICATION_NAME"
      - echo "REPOSITORY_URI -> $REPOSITORY_URI"
      - echo "REPOSITORY_NAME -> ${REPOSITORY_NAME}"
      - echo "REPOSITORY_BRANCH -> ${REPOSITORY_BRANCH}"
    finally:
      - echo "The initial step of this pipeline prepares the environment, installing the command-line tools needed to build the application."
      - echo "The step completed successfully."
      - echo "If this step fails, check the following options:"
      - echo "​📌​ Aplication assume role."
      - echo "​📌 ​External repository connection."
  pre_build:
    commands:
      - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $REPOSITORY_URI
  build:
    on-failure: ABORT 
    commands:
      - export SCOPE
      - export APPLICATION_SCOPE
      - export APPLICATION
      - export APPLICATION_NAME
      - docker build -t ${APPLICATION_NAME}:${VERSION} .
      - docker tag ${APPLICATION_NAME}:${VERSION} ${REPOSITORY_URI}:${APPLICATION_NAME}-${VERSION}
      - docker push ${REPOSITORY_URI}:${APPLICATION_NAME}-${VERSION}
      - echo "Build success!🚀🚀🚀"
      - echo "Publish image success!🍻🍻"
    finally:
      - echo "The build step is responsible for building the container image and storing it in a registry, to be used in the deploy stage of the application in the environment."
      - echo "The step completed successfully."
      - echo "If this step fails, check the following options:"
      - echo "​📌​ Aplication assume role."
      - echo "​📌 Registry connection."
      - echo "📌 Review Dockerfile."
      - echo "${REPOSITORY_URI}:${APPLICATION_NAME}"
